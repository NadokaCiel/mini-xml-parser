{"version":3,"file":"mini-xml-parser.min.js","sources":["../src/replaceMappings.ts","../node_modules/fast-xml-parser/src/util.js","../node_modules/fast-xml-parser/src/validator.js","../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../node_modules/strnum/strnum.js","../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../node_modules/fast-xml-parser/src/fxp.js","../src/index.ts"],"sourcesContent":["export default {\n  \"wx:if\": \"a:if\",\n  \"wx:elif\": \"a:elif\",\n  \"wx:else\": \"a:else\",\n  \"wx:for\": \"a:for\",\n  \"wx:for-index\": \"a:for-index\",\n  \"wx:for-item\": \"a:for-item\",\n  \"wx:key\": \"a:key\",\n  \"bind:tap\": \"onTap\",\n  \"catch:tap\": \"catchTap\",\n  \"bind:longtap\": \"longTap\",\n  \"catch:longtap\": \"longTap\",\n  \"bind:touchstart\": \"touchstart\",\n  \"catch:touchstart\": \"touchstart\",\n  \"bind:touchmove\": \"touchmove\",\n  \"catch:touchmove\": \"touchmove\",\n  \"bind:touchend\": \"touchend\",\n  \"catch:touchend\": \"touchend\",\n  \"bind:touchcancel\": \"touchcancel\",\n  \"catch:touchcancel\": \"touchcancel\",\n}","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<') {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                    }else{\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\n                    }\n                }else if(entity){\n                    parseEntityExp(exp, entities);\n                    entity = false;\n                }\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"amp\" : { regex: /&(amp|#38|#x26);/g, val : \"&\"},\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      const aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n       \n        let result = readTagExp(xmlData,i, this. options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName) {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options){\n    return arrToStr( jArray, options, \"\", 0);\n}\n\nfunction arrToStr(arr, options, jPath, level){\n    let xmlStr = \"\";\n\n    let indentation = \"\";\n    if(options.format && options.indentBy.length > 0){//TODO: this logic can be avoided for each call\n        indentation = EOL + \"\" + options.indentBy.repeat(level);\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if(jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if(tagName === options.textNodeName){\n            let tagText = tagObj[tagName];\n            if(!isStopNode(newJPath, options)){\n                tagText = options.tagValueProcessor( tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            xmlStr += indentation + tagText;\n            continue;\n        }else if( tagName === options.cdataPropName){\n            xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            continue;\n        }else if( tagName === options.commentPropName){\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            continue;\n        }else if( tagName[0] === \"?\"){\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            continue;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        let tagStart =  indentation + `<${tagName}${attStr}`;\n        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);\n        if(options.unpairedTags.indexOf(tagName) !== -1){\n            if(options.suppressUnpairedNode)  xmlStr += tagStart + \">\"; \n            else xmlStr += tagStart + \"/>\"; \n        }else if( (!tagValue || tagValue.length === 0) && options.suppressEmptyNode){ \n            xmlStr += tagStart + \"/>\"; \n        }else{ \n            //TODO: node with only text value should not parse the text value in next line\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` ;\n        }\n    }\n    \n    return xmlStr;\n}\n\nfunction propName(obj){\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if(key !== \":@\") return key;\n    }\n  }\n\nfunction attr_to_str(attrMap, options){\n    let attrStr = \"\";\n    if(attrMap && !options.ignoreAttributes){\n        for (let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if(attrVal === true && options.suppressBooleanAttributes){\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            }else{\n                attrStr+= ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options){\n    jPath = jPath.substr(0,jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if(options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\"+tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options){\n    if(textValue && textValue.length > 0 && options.processEntities){\n      for (let i=0; i< options.entities.length; i++) {\n        const entity = options.entities[i];\n        textValue = textValue.replace(entity.regex, entity.val);\n      }\n    }\n    return textValue;\n  }\nmodule.exports = toXml;","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: []\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.suppressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.buildAttrPairStr = buildAttrPairStr;\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction buildAttrPairStr(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  let tagEndExp = '</' + key + this.tagEndChar;\n  let piClosingChar = \"\";\n  \n  if(key[0] === \"?\") {\n    piClosingChar = \"?\";\n    tagEndExp = \"\";\n  }\n\n  if (attrStr && val.indexOf('<') === -1) {\n    return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  }else {\n    return (\n      this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n      val +\n      this.indentate(level) + tagEndExp    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n      if(this.options.suppressUnpairedNode){\n        return this.indentate(level) + '<' + key + this.tagEndChar;\n      }else{\n        return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n      }\n    } else{\n      return (\n        this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar  );\n    }\n\n  }\n}\n\nfunction replaceEntitiesValue(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if( val === '' && this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(this.options.suppressUnpairedNode){\n      return this.indentate(level) + '<' + key + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + \"/\" + this.tagEndChar;\n    }\n  }else if (val !== '') { //empty\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; //PI tag\n    else return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //normal\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","import { readFileSync, writeFileSync } from \"fs\";\nimport { join } from \"path\";\nimport replaceMappings from \"./replaceMappings\";\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\n\nexport function transform(xml: string) {\n  const options = {\n    ignoreAttributes: false,\n    allowBooleanAttributes: true,\n  };\n\n  const parser = new XMLParser(options);\n  const xmlJs = parser.parse(xml);\n  console.log(xmlJs);\n\n  // 替换成平台的属性\n  map(xmlJs);\n\n  const builder = new XMLBuilder({\n    ignoreAttributes: false,\n    suppressBooleanAttributes: true,\n    suppressEmptyNode: true,\n    format: true,\n    indentBy: \"  \",\n    attributeNamePrefix: \"@_\",\n    entities: [],\n  } as any);\n\n  return builder.build(xmlJs);\n}\n\nfunction isPlainObject(val: any): val is Record<string, any> {\n  if (\n    val === null ||\n    Object.prototype.toString.call(val) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\nfunction map(jsonObj: Record<string, any>) {\n  console.log(jsonObj);\n  Object.keys(jsonObj || {})\n    .filter((key) => key.startsWith(\"@_\"))\n    .forEach((key) => {\n      const name = key.replace(/^\\@_/, \"\") as keyof typeof replaceMappings;\n      let keyName: string = name;\n      if (\n        !replaceMappings[name] &&\n        (name?.startsWith(\"bind:\") || name?.startsWith(\"catch:\"))\n      ) {\n        keyName = keyName.replace(/^(bind:)|^(catch:)/, \"\");\n      }\n\n      keyName =\n        replaceMappings[keyName as keyof typeof replaceMappings] || keyName;\n      const value = jsonObj[key];\n      delete jsonObj[key];\n      jsonObj[`@_${keyName}`] = value;\n    });\n\n  Object.keys(jsonObj || {})\n    .filter((key) => !key.startsWith(\"@_\"))\n    .forEach((key) => {\n      if (isPlainObject(jsonObj[key])) {\n        map(jsonObj[key]);\n      }\n      if (Array.isArray(jsonObj[key])) {\n        jsonObj[key].forEach((item: any) => {\n          if (isPlainObject(item)) {\n            map(item);\n          }\n        });\n        return;\n      }\n    });\n}\n\nexport default function parse(source: string, dest: string) {\n  const xml = readFileSync(join(process.cwd(), source), \"utf-8\");\n  const builderXml = transform(xml);\n  writeFileSync(dest, builderXml);\n}\n"],"names":["replaceMappings","fn","nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","readAttributeStr","attrStr","startChar","tagClosed","value","validAttrStrRegxp","validateAttributeString","options","util","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","validateAmpersand","re","validateNumberAmpersand","count","code","message","lineNumber","err","msg","line","col","lines","substring","split","assign","tags","tagFound","reachedRoot","tagStartPos","closingTag","tagName","trim","result","attrStrStart","isValid","otg","pop","openPos","indexOf","afterAmp","JSON","stringify","map","t","replace","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","xmlNode","constructor","this","child","add","key","addChild","node","entityRegex","parseEntityExp","exp","entities","regx","DocTypeReader","Error","hasBody","entity","comment","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","eNotation","strnum","str","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","search","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","attrs","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastIndexOf","tagsNodeStack","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","readDocType","docTypeEntities","lastTag","isItStopNode","tagContent","readStopNodeData","entityName","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","openTagCount","shouldParse","toNumber","OrderedObjParser_1","amp","apos","gt","lt","quot","space","cent","pound","yen","euro","copyright","reg","inr","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","Array","attrMap","jpath","atrrName","propCount","buildOptions","require$$0","prettify","require$$1","XMLParser_1","parse","validationOption","toString","validator","validate","orderedObjParser","OrderedObjParser","orderedResult","addEntity","arrToStr","level","xmlStr","indentation","format","indentBy","repeat","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","attr","attrVal","suppressBooleanAttributes","textValue","orderedJs2Xml","jArray","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","buildAttrPairStr","object","j2x","tagEndExp","piClosingChar","name","startsWith","prototype","build","jObj","buildFromOrderedJs","arrayNodeName","Date","arrLen","j","item","Ks","L","fxp","XMLParser","XMLValidator","XMLBuilder","transform","xml","xmlJs","console","log","isPlainObject","call","getPrototypeOf","jsonObj","filter","forEach","keyName","concat","source","dest","builderXml","readFileSync","join","process","cwd","writeFileSync","defineProperty"],"mappings":"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"}